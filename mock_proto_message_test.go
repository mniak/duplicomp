// Code generated by MockGen. DO NOT EDIT.
// Source: google.golang.org/protobuf/proto (interfaces: Message)

// Package duplicomp is a generated GoMock package.
package duplicomp

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
)

// MockMessage is a mock of Message interface.
type MockMessage struct {
	ctrl     *gomock.Controller
	recorder *MockMessageMockRecorder
}

// MockMessageMockRecorder is the mock recorder for MockMessage.
type MockMessageMockRecorder struct {
	mock *MockMessage
}

// NewMockMessage creates a new mock instance.
func NewMockMessage(ctrl *gomock.Controller) *MockMessage {
	mock := &MockMessage{ctrl: ctrl}
	mock.recorder = &MockMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessage) EXPECT() *MockMessageMockRecorder {
	return m.recorder
}

// ProtoReflect mocks base method.
func (m *MockMessage) ProtoReflect() protoreflect.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProtoReflect")
	ret0, _ := ret[0].(protoreflect.Message)
	return ret0
}

// ProtoReflect indicates an expected call of ProtoReflect.
func (mr *MockMessageMockRecorder) ProtoReflect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtoReflect", reflect.TypeOf((*MockMessage)(nil).ProtoReflect))
}
